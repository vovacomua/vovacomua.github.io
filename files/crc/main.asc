application.onAppStart = function (){
	// Get the server shared object 'users_so'
	application.users_so = SharedObject.get("users_so", false);
	application.ban_so = SharedObject.get("ban_so", true);
}

application.onConnect = function(newClient, myID, sex, tgt)
{
	trace("connect 8 - 0");
	//add values 2 Cilent obj
	//информация о клиенте
	
	newClient.ID = myID;
	newClient.sex = sex;
	newClient.tgt = tgt;
	newClient.visavis = null;
	newClient.lastvis = null;
	
	//client call
	newClient.UPDSO = function (myvar) {
		trace('got z call 4 2');
		//application.users_so.send("msgFromSrvr", "message");// add resp
		return "from srvr";
	}
	//запись нарушителя
	
	newClient.REC = function (myid) {
		trace('got REC ');
		//Start recording 
		s = Stream.get("banStream127.0.0.1"); //vid file nm  
		
		if (s){ 
			s.onStatus = function(info)
				{ 
            	trace(info.code)
        		}; 
			//
    		s.record("record", 1, -1); 
    		s.play("stream"+myid); //user's stream  
    		
    		}
		return "from srvr REC";
	}
	//разбанить нарушителя
	
	newClient.unbanUser = function (ip_rptd) {
		trace("unban "+ip_rptd);
		
		cliObj = application.ban_so.getProperty(ip_rptd);
	
		if (!(cliObj == null || cliObj == undefined)){
			trace("unban got sucha");
			application.ban_so.setProperty(ip_rptd, undefined);
		}
		application.ban_so.flush();
		
		return "unbanned!";
	}
	// пожаловаться (число предупреждений перед баном - 5)
	
	newClient.reportUser = function (id) {
		trace('got reportUser call');
		bufferObj = application.users_so.getProperty(id);
		trace("reportUser " + bufferObj.ip);
		trace("reportER " + this.ip);
		
		var rpl = processReport(String(bufferObj.ip), String(this.ip));
		
		//rec
		//Start recording 
		
		if (rpl >= 5){
		s = Stream.get("banStream"+String(bufferObj.ip)); //vid file nm  
		
		if (s){ 
			s.onStatus = function(info)
				{ 
            	trace(info.code)
        		}; 
			//
    		s.record("record", 1, -1); 
    		s.play("stream"+id); //user's stream  
    		
    		}
		
		//end rec
		}
		
		return String(rpl);
	}
	//по кнопке ДАЛЕЕ - обнулить записи о собеседниках перед последующим вызовом функции поиска новых
	
	newClient.NEXT = function (id) {
		trace('call next');
		
		//application.users_so.lock();
		var vis = null;
		bufferObj = application.users_so.getProperty(id);
		
		if (!(bufferObj == null || bufferObj == undefined)){ 		//if exists
			vis = bufferObj.visavis;								
			if (!(vis == null || vis == undefined)){				//if not set null yet
				bufferObj.visavis = null;
				application.users_so.setProperty(id, bufferObj);
				//
				bufferObj = application.users_so.getProperty(vis); //vis-not null!(checked above) 
				if (!(bufferObj == null || bufferObj == undefined)){ //if exists
					bufferObj.visavis = null;
					application.users_so.setProperty(vis, bufferObj);
					
				}
				application.users_so.flush();
			}
		}
		//application.users_so.unlock();
		
		return "from srvr NEXT";
	}
	//getVisavis
	//поиск собеседника и запись информации о них в Shared Object
	
	
	newClient.getVisavis = function (id, rnd) {
		trace('got getVisavis 2');
		
		//application.users_so.lock();
		
		//test
		//bufferObj = application.users_so.getProperty(id);
		//this.call("traceFromServer", null, 1);//--TEST --OK
		//end test
		var retrn = '::no::';
		var rep = findPartner(id, rnd);
		trace("from getVisavis: "+rep);
		
		if(rep != null){
		retrn = rep;
			
		bufferObj = application.users_so.getProperty(id);
		bufferObj.visavis = rep;
		application.users_so.setProperty(id, bufferObj);
		
		bufferObj = application.users_so.getProperty(rep);
		bufferObj.visavis = id;
		application.users_so.setProperty(rep, bufferObj);
		application.users_so.flush();
		}
		
		//application.users_so.unlock();
		
		return retrn;
	}
	
	//application.users_so.send("msgFromSrvr", "message");
	
	newClient.msgFromClient = function(msg) {	
		msg = msg;
		application.users_so.send("msgFromSrvr", msg, this.ID);
		trace("msgFromClient 2 ");
	}
	
	//подключение нового пользователя
	
	if ((!isBanned(String(newClient.ip)))||newClient.ID == 'admin'){
		//accept connection
	application.acceptConnection(newClient);
	//add to SO
	application.users_so.setProperty(myID, newClient);
	} else {
		var error = new Object(); error.message = "You ip is banned!";
		application.rejectConnection(newClient, error);
	}
	
}

//проверка, забанен ли пользователь (число жалоб - 5)


function isBanned(ip_rptd){
	var isB = true;
	
	cliObj = application.ban_so.getProperty(ip_rptd);
	
	if (cliObj == null || cliObj == undefined){
		isB = false;
	} else {
		if (cliObj.sum < 5){
			isB = false;
		}
	}
	
	trace("isB "+ isB);
	
	return isB;

}

//обработка сообщения с жалобой (число жалоб - 5)

function processReport(ip_rptd, ip_reporter){
	var sum = 5;
	
	cliObj = application.ban_so.getProperty(ip_rptd);
	
	if (cliObj == null || cliObj == undefined){
		trace("processReport: cliObj is undf");
		banObj = {};
		banObj["ipaddr"] = ip_rptd;
		banObj["reporters"] = ip_reporter;
		banObj["sum"] = 1;
		application.ban_so.setProperty(ip_rptd, banObj);
		
		sum = 1;
	} else {
		trace(cliObj.sum);
		trace(cliObj["ipaddr"]);
		
			if (cliObj.sum < 5){
				
				if (String(cliObj.reporters).indexOf(ip_reporter) < 0){
					var s = 0;
					s = cliObj.sum; s = s+1; cliObj.sum = s;
					
					var r = "";
					r = cliObj.reporters; r = r + ip_reporter; cliObj.reporters = r;
				
					application.ban_so.setProperty(ip_rptd, cliObj);
				
					sum = cliObj.sum;
				} else {
					sum = -1;
				}
	
			}
	}
	
	application.ban_so.flush();
	
	return sum;
}

//поиск собеседника

function findPartner(id, rnd){
	trace("-fP" + rnd);

	var match = null;
	var matchArr = new Array();
	var ii = 0;
	//var cliObj;
	cliObj = application.users_so.getProperty(id);
	//cliObj.call("traceFromServer", null, 1); - not wrkz
	//trace SO in SSAS
	//myInfo = SharedObject.get("users_so");// get so
	var names = application.users_so.getPropertyNames(); // get prop names
	for (zz in names){ 						//loop thru names arr
		trace(zz); // indexed array - 0, 1, 2...
		
		var propVal = application.users_so.getProperty(names[zz]);
		//names[zz] 4 name; propVal 4 Object
		trace("Value of property " + names[zz] + " = " + propVal.sex); 
		//matchmaking
		if ((cliObj.visavis == null)&&(propVal.ID != id)&&(propVal.visavis == null)){
			
			if(
				(String(cliObj.tgt).indexOf(String(propVal.sex))>=0) &&
				(String(propVal.tgt).indexOf(String(cliObj.sex))>=0)
			)
				{
					matchArr.push(propVal.ID);
				}
		}
		//end
		}
		
	for (a in matchArr) {
	trace("id : "+matchArr[a]);
	}
	
	if (matchArr.length == 1){
		match = matchArr[0];
	}
	
	if (matchArr.length > 1){
		rr = Math.random();
		ii = Math.round(rr * (matchArr.length-1));
		trace("rnd: "+rr + " len: "+matchArr.length + " ii: "+ ii);

		match = matchArr[ii];
	}
	
	return match;
}

//отключение пользователя, очистка информации о нем в Shared Object и в записи его собеседника (если такой был)

application.onDisconnect = function(newClient)
{
	//application.users_so.lock();
	
	cliObj = application.users_so.getProperty(newClient.ID);
	
	if (!(cliObj == null || cliObj == undefined)){
		trace("disconnect's visavis: " + cliObj.visavis); // - OK
	
	if(cliObj.visavis != null){
		bufferObj = application.users_so.getProperty(cliObj.visavis);
		trace("cliObj: " + bufferObj.visavis);
		bufferObj.visavis = null;// ok
		application.users_so.setProperty(cliObj.visavis, bufferObj);
	}
	
	application.users_so.setProperty(newClient.ID, undefined);
	application.users_so.flush();
	}
	
	//application.users_so.unlock();
}